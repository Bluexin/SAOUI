buildscript {
    repositories {
        mavenCentral()
        maven {
            name = 'forge'
            url = 'http://files.minecraftforge.net/maven'
        }
        maven {
            name = 'sonatype'
            url = 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'maven-publish'
apply plugin: 'kotlin'
apply plugin: 'net.minecraftforge.gradle.forge'

version = "${mc_version}-${mod_version}"
group = "com.saomc" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "saoui"

sourceCompatibility = 1.8
targetCompatibility = 1.8

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 10, 'minutes'
}

minecraft {
    version = "${mc_version}-${forge_version}"
    runDir = "run"
    mappings = "${mappings_version}"

}

repositories {
    jcenter()
    mavenCentral()
    maven {
        name = "Bluexin Releases"
        url = "http://maven.bluexin.be/repository/releases/"
    }
    maven {
        name = "Bluexin Snapshots"
        url = "http://maven.bluexin.be/repository/snapshots/"
    }
    maven {
        name = "TCons & Mantle"
        url = "http://dvs1.progwml6.com/files/maven/"
    }
}

reobf {
    jar {
        extraLines += ["PK: gnu/jel saoui/shade/gnu/jel"]
        extraLines += ["PK: com/helger saoui/shade/com/helger"]
//        extraLines += ["PK: edu/umd saoui/shade/edu/umd"]
        extraLines += ["PK: org/slf4j saoui/shade/org/slf4j"]
    }
}

configurations {
    shade
    compile.extendsFrom shade
}

dependencies {
    compile "be.bluexin:saomc-lib:1.12.2-1.3.0-SNAPSHOT:deobf"
    compile "com.teamwizardry.librarianlib:librarianlib-1.12.2:4.15-SNAPSHOT:deobf"
    shade 'be.bluexin.gnu.jel:gnu-jel:2.1.3'
    compile 'be.bluexin.gnu.jel:gnu-jel:2.1.3'
    shade 'com.helger:ph-css:6.1.1'
    compile 'com.helger:ph-css:6.1.1'
} // TODO: move to new shadow system so it doesn't break dependency info

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

idea { module { inheritOutputDirs = true } }

def releaseJar = artifacts.add('archives', file(configurations.archives.allArtifacts.getFiles().files[0])) {
    builtBy reobfJar
}

components.java.artifacts.clear()
components.java.artifacts.add(releaseJar)

task sourceJar(type: Jar, dependsOn: 'sourceMainJava', overwrite: true) {
    from 'build/sources/main/java'
    classifier = 'sources'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

publishing {
    publications {
        saoui(MavenPublication) {
            from components.java
            artifact deobfJar
            artifact sourceJar
        }
    }

    repositories {
        def remote = System.getenv('REPO_PWD') != null
        maven {
            def remoteURL = "https://maven.bluexin.be/repository/" + (((String) project.version).contains("SNAPSHOT")? "snapshots": "releases")
            def localURL = "file://${buildDir}/repo"
            url = remote? remoteURL: localURL
            if (remote) {
                credentials(PasswordCredentials) {
                    username = 'CI'
                    password = System.getenv('REPO_PWD')
                }
            }
        }
    }
}

jar {
    for (dep in configurations.shade) {
        from(project.zipTree(dep)) {
//            include '*/**.class'
            exclude 'META-INF/MANIFEST.MF', 'META-INF/buildinfo.xml', 'LICENSE*', 'changelog*', 'NOTICE*',
                    'javax/annotation/**', 'edu/umd/cs/findbugs/annotations/**'
        }
    }
}

task apiArtifact(type: Jar, dependsOn: compileJava) {
    from sourceSets.main.output
    include "com/saomc/saoui/api/**"
    classifier = 'api'
}

tasks.withType(Copy) {
    includeEmptyDirs = false
}

kotlin {
    experimental {
        coroutines "enable"
    }
}

compileKotlin {
    kotlinOptions {
        javaParameters = true
        jvmTarget = 1.8
    }
}
